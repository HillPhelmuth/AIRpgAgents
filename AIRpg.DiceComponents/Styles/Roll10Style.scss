$containerWidth: 200px;
$containerHeight: $containerWidth;

$upperHeight: $containerWidth*0.40;
$lowerHeight: $containerWidth*0.10;
$internalWidth: $upperHeight*0.52;

$transitionDuration: 0.5s;
$animationDuration: 3s;

$angle: 45deg;
$sideAngle: 360deg/5; // Adjustment for a 10-sided die (5 sides on top, 5 on bottom)
$opacity: 0.75;
$color: rgba(30, 180, 20, $opacity);

$translateZ: $upperHeight*0.34;
$translateY: $lowerHeight*0.29;
$translateLowerZ: -$translateZ;
$translateLowerY: -$translateY;
$rotateX: $angle;

@keyframes roll {
    10% {
        transform: rotateX(0deg) rotateY(0deg) rotateZ(0deg)
    }

    30% {
        transform: rotateX(120deg) rotateY(240deg) rotateZ(0deg) translateX(40px) translateY(40px)
    }

    50% {
        transform: rotateX(240deg) rotateY(480deg) rotateZ(0deg) translateX(-40px) translateY(-40px)
    }

    70% {
        transform: rotateX(360deg) rotateY(720deg) rotateZ(0deg)
    }

    90% {
        transform: rotateX(480deg) rotateY(960deg) rotateZ(0deg)
    }
}

.dice10content {
    margin: auto auto;
    position: relative;
    width: $containerWidth;
    height: $containerHeight;
    perspective: 1500px;
}

.die10 {
    position: absolute;
    width: 100%;
    height: 100%;
    transform-style: preserve-3d;
    transition: transform $transitionDuration ease-out;
    cursor: pointer;
    transform: rotateX(-$angle);

    &.reset {
        transition: transform 0.1s ease-out;
        transform: rotateX(0);
    }

    &.rolling {
        animation: roll $animationDuration linear;
    }

    &.stopped {
        transform: translate(50%, 50%);
    }

    @for $i from 1 through 10 {
        &[data-face="#{$i}"] {
            @if $i % 2 == 0 {
                $angleMultiplier: $i / 2;
                transform: rotateX(-$angle) rotateY($sideAngle * $angleMultiplier);
            }
            @else {
                $angleMultiplier: ($i + 1) / 2;
                transform: rotateX(-180deg - $angle) rotateY(-$sideAngle * $angleMultiplier);
            }
        }

        .face.face-#{$i} {

            @if $i % 2 == 0 {
                // even sides are in the upper position of the die

                $angleMultiplier: $i / 2;
                transform: rotateY(-$sideAngle * $angleMultiplier) translateZ($translateZ) translateY($translateY) rotateX($angle);
            }
            @else {
                // odd sides are in the lower position of the die
                top: $upperHeight;

                $angleMultiplier: ($i + 1) / 2;
                transform: rotateY($sideAngle * $angleMultiplier) translateZ($translateLowerZ) translateY($translateLowerY) rotateZ(180deg) rotateY(180deg) rotateX($angle);
            }
        }
    }

    .face {
        $horizontalMargin: -$internalWidth;

        position: absolute;
        left: 50%;
        top: 0;
        margin: 0 $horizontalMargin;
        border-left: $internalWidth solid transparent;
        border-right: $internalWidth solid transparent;
        border-bottom: $upperHeight solid $color;
        width: 0px;
        height: 0px;
        transform-style: preserve-3d;
        backface-visibility: hidden;
        counter-increment: steps 1;

        &:first-child {
            counter-increment: steps 1;
        }

        &:before {
            content: counter(steps);
            position: absolute;
            top: $upperHeight*0.20;
            left: -$internalWidth;
            color: #fff;
            text-shadow: 1px 1px 3px #000;
            font-size: $upperHeight*0.6;
            text-align: center;
            line-height: $upperHeight;
            width: $internalWidth*2;
            height: $upperHeight;
        }

        &:after {
            content: "";
            position: absolute;
            bottom: -($upperHeight + $lowerHeight);
            left: -$internalWidth;
            border-left: $internalWidth solid transparent;
            border-right: $internalWidth solid transparent;
            border-top: $lowerHeight solid $color;
            width: 0px;
            height: 0px;
        }
    }
}
